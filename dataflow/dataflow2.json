{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureDataExplorerTable_samples",
						"type": "DatasetReference"
					},
					"name": "samples"
				},
				{
					"dataset": {
						"referenceName": "AzureDataExplorerTable_meta_channels",
						"type": "DatasetReference"
					},
					"name": "MetaChannels"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "join1"
				},
				{
					"name": "select2"
				},
				{
					"name": "pivot1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          sample_id as string,",
				"          Timestamp as timestamp,",
				"          channel_id as string,",
				"          value as double",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     format: 'table') ~> samples",
				"source(output(",
				"          channel_id as string,",
				"          meta_channel_update_time as timestamp,",
				"          meta_channel as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     format: 'table') ~> MetaChannels",
				"join1 select(mapColumn(",
				"          Timestamp,",
				"          value,",
				"          meta_channel",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(name = regexExtract(meta_channel, 'name\":\"(\\\\w+)\"', 1) + regexExtract(meta_channel, 'sid\":\"(\\\\w+)\"', 1)) ~> derivedColumn1",
				"samples, MetaChannels join(samples@channel_id == MetaChannels@channel_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"derivedColumn1 select(mapColumn(",
				"          Timestamp,",
				"          value,",
				"          name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 pivot(groupBy(Timestamp),",
				"     pivotBy(name),",
				"     {} = max(value),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivot1"
			]
		}
	}
}